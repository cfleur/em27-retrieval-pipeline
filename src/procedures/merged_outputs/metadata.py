import pendulum
import tum_esm_em27_metadata
import tum_esm_utils

from src import custom_types


def get_metadata(
    em27_metadata: tum_esm_em27_metadata.interfaces.EM27MetadataInterface,
    campaign: tum_esm_em27_metadata.types.CampaignMetadata,
    sensor_data_contexts: dict[str, tum_esm_em27_metadata.types.SensorDataContext],
    output_merging_target: custom_types.config.OutputMergingTargetConfig,
) -> str:
    """Returns a description of the campaign."""

    metadata_lines = [
        f"CONTACT:",
        f"    person:                Prof. Dr.-Ing. Jia Chen <jia.chen@tum.de>",
        f"    department:            Professorship of Environmental Sensing and Modeling",
        f"    institution:           Technical University of Munich",
        f"    website:               https://www.ee.cit.tum.de/en/esm",
        f"",
        f"FILE GENERATION:",
        f"    retrieval software:    Proffast 2.2",
        f"    meteorological model:  GGG2014",
        f"    file generated by:     https://github.com/tum-esm/automated-retrieval-pipeline",
        f"    pipeline commit sha:   {tum_esm_utils.shell.get_commit_sha()}",
        f"    file generated at:     {pendulum.now().to_w3c_string()}",  # type: ignore
        f"",
        f"FILE CONTENT:",
        f"    campaign id:           {campaign.campaign_id}",
        f"    date:                  {next(c for c in sensor_data_contexts.values()).from_datetime.strftime('%Y-%m-%d')}",
        f"    data types:            {', '.join(output_merging_target.data_types)}",
        f"    sampling rate:         {output_merging_target.sampling_rate}",
        f"",
    ]

    metadata_lines.append("SENSOR SERIAL NUMBERS:")
    for sid in campaign.sensor_ids:
        s = next(filter(lambda s: s.sensor_id == sid, em27_metadata.sensors))
        metadata_lines.append(
            "    "
            + tum_esm_utils.text.pad_string(
                f"{sid}: ", pad_position="right", min_width=10
            )
            + f"{s.serial_number}"
        )

    metadata_lines.append("")

    metadata_lines.append("LOCATION COORDINATES [lat, lon, alt]:")
    for lid in campaign.location_ids:
        l = next(filter(lambda l: l.location_id == lid, em27_metadata.locations))
        metadata_lines.append(
            "    "
            + tum_esm_utils.text.pad_string(
                f"{lid}: ", pad_position="right", min_width=10
            )
            + f"{l.lat}, {l.lon}, {l.alt} "
        )

    metadata_lines.append("")

    metadata_lines.append("SENSOR LOCATIONS:")
    for sid in campaign.sensor_ids:
        ctxs = list(
            filter(lambda sdc: sdc.sensor_id == sid, sensor_data_contexts.values())
        )
        if len(ctxs) == 0:
            metadata_lines.append(f"    {sid}: no data")
        else:
            lids = [ctx.location.location_id for ctx in ctxs]
            metadata_lines.append(f"    {sid}: {', '.join(lids)}")

    metadata_lines.append("")

    metadata_lines = ["## " + line for line in metadata_lines]
    metadata_lines.append("#" * 80)
    return "\n".join(metadata_lines) + "\n"
